// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.21.12
// source: scanner.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Scanner struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Id                 string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ScanType           string                 `protobuf:"bytes,2,opt,name=scan_type,proto3" json:"scan_type,omitempty"`
	Name               string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Status             bool                   `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
	CreatedAt          string                 `protobuf:"bytes,5,opt,name=created_at,proto3" json:"created_at,omitempty"`
	UpdatedAt          string                 `protobuf:"bytes,6,opt,name=updated_at,proto3" json:"updated_at,omitempty"`
	UserId             string                 `protobuf:"bytes,7,opt,name=user_id,proto3" json:"user_id,omitempty"`
	DeletedAt          string                 `protobuf:"bytes,8,opt,name=deleted_at,proto3" json:"deleted_at,omitempty"`
	Type               string                 `protobuf:"bytes,9,opt,name=type,proto3" json:"type,omitempty"`
	Target             string                 `protobuf:"bytes,10,opt,name=target,proto3" json:"target,omitempty"`
	Ip                 string                 `protobuf:"bytes,11,opt,name=ip,proto3" json:"ip,omitempty"`
	Subnet             int64                  `protobuf:"varint,12,opt,name=subnet,proto3" json:"subnet,omitempty"`
	StartIp            string                 `protobuf:"bytes,13,opt,name=start_ip,proto3" json:"start_ip,omitempty"`
	EndIp              string                 `protobuf:"bytes,14,opt,name=end_ip,proto3" json:"end_ip,omitempty"`
	Port               string                 `protobuf:"bytes,15,opt,name=port,proto3" json:"port,omitempty"`
	Username           string                 `protobuf:"bytes,16,opt,name=username,proto3" json:"username,omitempty"`
	Password           string                 `protobuf:"bytes,17,opt,name=password,proto3" json:"password,omitempty"`
	ApiKey             string                 `protobuf:"bytes,18,opt,name=api_key,proto3" json:"api_key,omitempty"`
	Domain             string                 `protobuf:"bytes,19,opt,name=domain,proto3" json:"domain,omitempty"`
	AuthenticationType string                 `protobuf:"bytes,20,opt,name=authentication_type,proto3" json:"authentication_type,omitempty"`
	Protocol           string                 `protobuf:"bytes,21,opt,name=protocol,proto3" json:"protocol,omitempty"`
	Schedule           *Schedule              `protobuf:"bytes,22,opt,name=schedule,proto3" json:"schedule,omitempty"`
	ProfileId          string                 `protobuf:"bytes,23,opt,name=profile_id,proto3" json:"profile_id,omitempty"`
	NmapProfile        *NmapProfile           `protobuf:"bytes,24,opt,name=nmap_profile,proto3" json:"nmap_profile,omitempty"`
	CustomSwitches     string                 `protobuf:"bytes,25,opt,name=custom_switches,proto3" json:"custom_switches,omitempty"`
	SshKeyPath         string                 `protobuf:"bytes,26,opt,name=ssh_key_path,proto3" json:"ssh_key_path,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *Scanner) Reset() {
	*x = Scanner{}
	mi := &file_scanner_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Scanner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scanner) ProtoMessage() {}

func (x *Scanner) ProtoReflect() protoreflect.Message {
	mi := &file_scanner_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scanner.ProtoReflect.Descriptor instead.
func (*Scanner) Descriptor() ([]byte, []int) {
	return file_scanner_proto_rawDescGZIP(), []int{0}
}

func (x *Scanner) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Scanner) GetScanType() string {
	if x != nil {
		return x.ScanType
	}
	return ""
}

func (x *Scanner) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Scanner) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *Scanner) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Scanner) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *Scanner) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Scanner) GetDeletedAt() string {
	if x != nil {
		return x.DeletedAt
	}
	return ""
}

func (x *Scanner) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Scanner) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *Scanner) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Scanner) GetSubnet() int64 {
	if x != nil {
		return x.Subnet
	}
	return 0
}

func (x *Scanner) GetStartIp() string {
	if x != nil {
		return x.StartIp
	}
	return ""
}

func (x *Scanner) GetEndIp() string {
	if x != nil {
		return x.EndIp
	}
	return ""
}

func (x *Scanner) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

func (x *Scanner) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Scanner) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Scanner) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

func (x *Scanner) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *Scanner) GetAuthenticationType() string {
	if x != nil {
		return x.AuthenticationType
	}
	return ""
}

func (x *Scanner) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *Scanner) GetSchedule() *Schedule {
	if x != nil {
		return x.Schedule
	}
	return nil
}

func (x *Scanner) GetProfileId() string {
	if x != nil {
		return x.ProfileId
	}
	return ""
}

func (x *Scanner) GetNmapProfile() *NmapProfile {
	if x != nil {
		return x.NmapProfile
	}
	return nil
}

func (x *Scanner) GetCustomSwitches() string {
	if x != nil {
		return x.CustomSwitches
	}
	return ""
}

func (x *Scanner) GetSshKeyPath() string {
	if x != nil {
		return x.SshKeyPath
	}
	return ""
}

type ScannerFilter struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Name            string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type            string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Status          bool                   `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	HasStatusFilter bool                   `protobuf:"varint,4,opt,name=has_status_filter,proto3" json:"has_status_filter,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ScannerFilter) Reset() {
	*x = ScannerFilter{}
	mi := &file_scanner_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScannerFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScannerFilter) ProtoMessage() {}

func (x *ScannerFilter) ProtoReflect() protoreflect.Message {
	mi := &file_scanner_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScannerFilter.ProtoReflect.Descriptor instead.
func (*ScannerFilter) Descriptor() ([]byte, []int) {
	return file_scanner_proto_rawDescGZIP(), []int{1}
}

func (x *ScannerFilter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ScannerFilter) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ScannerFilter) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *ScannerFilter) GetHasStatusFilter() bool {
	if x != nil {
		return x.HasStatusFilter
	}
	return false
}

type NmapProfile struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Arguments     []string               `protobuf:"bytes,4,rep,name=arguments,proto3" json:"arguments,omitempty"`
	IsDefault     bool                   `protobuf:"varint,5,opt,name=is_default,proto3" json:"is_default,omitempty"`
	IsSystem      bool                   `protobuf:"varint,6,opt,name=is_system,proto3" json:"is_system,omitempty"`
	CreatedBy     string                 `protobuf:"bytes,7,opt,name=created_by,proto3" json:"created_by,omitempty"`
	CreatedAt     string                 `protobuf:"bytes,8,opt,name=created_at,proto3" json:"created_at,omitempty"`
	UpdatedAt     string                 `protobuf:"bytes,9,opt,name=updated_at,proto3" json:"updated_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NmapProfile) Reset() {
	*x = NmapProfile{}
	mi := &file_scanner_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NmapProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NmapProfile) ProtoMessage() {}

func (x *NmapProfile) ProtoReflect() protoreflect.Message {
	mi := &file_scanner_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NmapProfile.ProtoReflect.Descriptor instead.
func (*NmapProfile) Descriptor() ([]byte, []int) {
	return file_scanner_proto_rawDescGZIP(), []int{2}
}

func (x *NmapProfile) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NmapProfile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NmapProfile) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *NmapProfile) GetArguments() []string {
	if x != nil {
		return x.Arguments
	}
	return nil
}

func (x *NmapProfile) GetIsDefault() bool {
	if x != nil {
		return x.IsDefault
	}
	return false
}

func (x *NmapProfile) GetIsSystem() bool {
	if x != nil {
		return x.IsSystem
	}
	return false
}

func (x *NmapProfile) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *NmapProfile) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *NmapProfile) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type Schedule struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ScheduleType   string                 `protobuf:"bytes,1,opt,name=schedule_type,proto3" json:"schedule_type,omitempty"`
	FrequencyValue int64                  `protobuf:"varint,2,opt,name=frequency_value,proto3" json:"frequency_value,omitempty"`
	FrequencyUnit  string                 `protobuf:"bytes,3,opt,name=frequency_unit,proto3" json:"frequency_unit,omitempty"`
	RunTime        string                 `protobuf:"bytes,4,opt,name=run_time,proto3" json:"run_time,omitempty"`
	Month          int64                  `protobuf:"varint,5,opt,name=month,proto3" json:"month,omitempty"`
	Week           int64                  `protobuf:"varint,6,opt,name=week,proto3" json:"week,omitempty"`
	Day            int64                  `protobuf:"varint,7,opt,name=day,proto3" json:"day,omitempty"`
	Hour           int64                  `protobuf:"varint,8,opt,name=hour,proto3" json:"hour,omitempty"`
	Minute         int64                  `protobuf:"varint,9,opt,name=minute,proto3" json:"minute,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Schedule) Reset() {
	*x = Schedule{}
	mi := &file_scanner_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Schedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schedule) ProtoMessage() {}

func (x *Schedule) ProtoReflect() protoreflect.Message {
	mi := &file_scanner_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schedule.ProtoReflect.Descriptor instead.
func (*Schedule) Descriptor() ([]byte, []int) {
	return file_scanner_proto_rawDescGZIP(), []int{3}
}

func (x *Schedule) GetScheduleType() string {
	if x != nil {
		return x.ScheduleType
	}
	return ""
}

func (x *Schedule) GetFrequencyValue() int64 {
	if x != nil {
		return x.FrequencyValue
	}
	return 0
}

func (x *Schedule) GetFrequencyUnit() string {
	if x != nil {
		return x.FrequencyUnit
	}
	return ""
}

func (x *Schedule) GetRunTime() string {
	if x != nil {
		return x.RunTime
	}
	return ""
}

func (x *Schedule) GetMonth() int64 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *Schedule) GetWeek() int64 {
	if x != nil {
		return x.Week
	}
	return 0
}

func (x *Schedule) GetDay() int64 {
	if x != nil {
		return x.Day
	}
	return 0
}

func (x *Schedule) GetHour() int64 {
	if x != nil {
		return x.Hour
	}
	return 0
}

func (x *Schedule) GetMinute() int64 {
	if x != nil {
		return x.Minute
	}
	return 0
}

type CreateScannerRequest struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	ScanType           string                 `protobuf:"bytes,1,opt,name=scan_type,proto3" json:"scan_type,omitempty"`
	Name               string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	UserId             string                 `protobuf:"bytes,3,opt,name=user_id,proto3" json:"user_id,omitempty"`
	Type               string                 `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Target             string                 `protobuf:"bytes,5,opt,name=target,proto3" json:"target,omitempty"`
	Ip                 string                 `protobuf:"bytes,6,opt,name=ip,proto3" json:"ip,omitempty"`
	Subnet             int64                  `protobuf:"varint,7,opt,name=subnet,proto3" json:"subnet,omitempty"`
	StartIp            string                 `protobuf:"bytes,8,opt,name=start_ip,proto3" json:"start_ip,omitempty"`
	EndIp              string                 `protobuf:"bytes,9,opt,name=end_ip,proto3" json:"end_ip,omitempty"`
	Port               string                 `protobuf:"bytes,10,opt,name=port,proto3" json:"port,omitempty"`
	Username           string                 `protobuf:"bytes,11,opt,name=username,proto3" json:"username,omitempty"`
	Password           string                 `protobuf:"bytes,12,opt,name=password,proto3" json:"password,omitempty"`
	ApiKey             string                 `protobuf:"bytes,13,opt,name=api_key,proto3" json:"api_key,omitempty"`
	Domain             string                 `protobuf:"bytes,14,opt,name=domain,proto3" json:"domain,omitempty"`
	AuthenticationType string                 `protobuf:"bytes,15,opt,name=authentication_type,proto3" json:"authentication_type,omitempty"`
	Protocol           string                 `protobuf:"bytes,16,opt,name=protocol,proto3" json:"protocol,omitempty"`
	Status             bool                   `protobuf:"varint,17,opt,name=status,proto3" json:"status,omitempty"`
	CreatedAt          string                 `protobuf:"bytes,18,opt,name=created_at,proto3" json:"created_at,omitempty"`
	UpdatedAt          string                 `protobuf:"bytes,19,opt,name=updated_at,proto3" json:"updated_at,omitempty"`
	DeletedAt          string                 `protobuf:"bytes,20,opt,name=deleted_at,proto3" json:"deleted_at,omitempty"`
	Schedule           *Schedule              `protobuf:"bytes,21,opt,name=schedule,proto3" json:"schedule,omitempty"`
	ProfileId          string                 `protobuf:"bytes,22,opt,name=profile_id,proto3" json:"profile_id,omitempty"`
	CustomSwitches     string                 `protobuf:"bytes,23,opt,name=custom_switches,proto3" json:"custom_switches,omitempty"`
	SshKeyPath         string                 `protobuf:"bytes,24,opt,name=ssh_key_path,proto3" json:"ssh_key_path,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CreateScannerRequest) Reset() {
	*x = CreateScannerRequest{}
	mi := &file_scanner_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateScannerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateScannerRequest) ProtoMessage() {}

func (x *CreateScannerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scanner_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateScannerRequest.ProtoReflect.Descriptor instead.
func (*CreateScannerRequest) Descriptor() ([]byte, []int) {
	return file_scanner_proto_rawDescGZIP(), []int{4}
}

func (x *CreateScannerRequest) GetScanType() string {
	if x != nil {
		return x.ScanType
	}
	return ""
}

func (x *CreateScannerRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateScannerRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateScannerRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CreateScannerRequest) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *CreateScannerRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *CreateScannerRequest) GetSubnet() int64 {
	if x != nil {
		return x.Subnet
	}
	return 0
}

func (x *CreateScannerRequest) GetStartIp() string {
	if x != nil {
		return x.StartIp
	}
	return ""
}

func (x *CreateScannerRequest) GetEndIp() string {
	if x != nil {
		return x.EndIp
	}
	return ""
}

func (x *CreateScannerRequest) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

func (x *CreateScannerRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *CreateScannerRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *CreateScannerRequest) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

func (x *CreateScannerRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *CreateScannerRequest) GetAuthenticationType() string {
	if x != nil {
		return x.AuthenticationType
	}
	return ""
}

func (x *CreateScannerRequest) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *CreateScannerRequest) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *CreateScannerRequest) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *CreateScannerRequest) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *CreateScannerRequest) GetDeletedAt() string {
	if x != nil {
		return x.DeletedAt
	}
	return ""
}

func (x *CreateScannerRequest) GetSchedule() *Schedule {
	if x != nil {
		return x.Schedule
	}
	return nil
}

func (x *CreateScannerRequest) GetProfileId() string {
	if x != nil {
		return x.ProfileId
	}
	return ""
}

func (x *CreateScannerRequest) GetCustomSwitches() string {
	if x != nil {
		return x.CustomSwitches
	}
	return ""
}

func (x *CreateScannerRequest) GetSshKeyPath() string {
	if x != nil {
		return x.SshKeyPath
	}
	return ""
}

type CreateScannerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Scanner       *Scanner               `protobuf:"bytes,1,opt,name=scanner,proto3" json:"scanner,omitempty"`
	Success       bool                   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage  string                 `protobuf:"bytes,3,opt,name=error_message,proto3" json:"error_message,omitempty"`
	Status        bool                   `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateScannerResponse) Reset() {
	*x = CreateScannerResponse{}
	mi := &file_scanner_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateScannerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateScannerResponse) ProtoMessage() {}

func (x *CreateScannerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scanner_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateScannerResponse.ProtoReflect.Descriptor instead.
func (*CreateScannerResponse) Descriptor() ([]byte, []int) {
	return file_scanner_proto_rawDescGZIP(), []int{5}
}

func (x *CreateScannerResponse) GetScanner() *Scanner {
	if x != nil {
		return x.Scanner
	}
	return nil
}

func (x *CreateScannerResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CreateScannerResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *CreateScannerResponse) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

type UpdateScannerRequest struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Id                 string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ScanType           string                 `protobuf:"bytes,2,opt,name=scan_type,proto3" json:"scan_type,omitempty"`
	Name               string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	UserId             string                 `protobuf:"bytes,4,opt,name=user_id,proto3" json:"user_id,omitempty"`
	Type               string                 `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	Target             string                 `protobuf:"bytes,6,opt,name=target,proto3" json:"target,omitempty"`
	Ip                 string                 `protobuf:"bytes,7,opt,name=ip,proto3" json:"ip,omitempty"`
	Subnet             int64                  `protobuf:"varint,8,opt,name=subnet,proto3" json:"subnet,omitempty"`
	StartIp            string                 `protobuf:"bytes,9,opt,name=start_ip,proto3" json:"start_ip,omitempty"`
	EndIp              string                 `protobuf:"bytes,10,opt,name=end_ip,proto3" json:"end_ip,omitempty"`
	Port               string                 `protobuf:"bytes,11,opt,name=port,proto3" json:"port,omitempty"`
	Username           string                 `protobuf:"bytes,12,opt,name=username,proto3" json:"username,omitempty"`
	Password           string                 `protobuf:"bytes,13,opt,name=password,proto3" json:"password,omitempty"`
	ApiKey             string                 `protobuf:"bytes,14,opt,name=api_key,proto3" json:"api_key,omitempty"`
	Domain             string                 `protobuf:"bytes,15,opt,name=domain,proto3" json:"domain,omitempty"`
	AuthenticationType string                 `protobuf:"bytes,16,opt,name=authentication_type,proto3" json:"authentication_type,omitempty"`
	Protocol           string                 `protobuf:"bytes,17,opt,name=protocol,proto3" json:"protocol,omitempty"`
	Status             bool                   `protobuf:"varint,18,opt,name=status,proto3" json:"status,omitempty"`
	ScheduleType       string                 `protobuf:"bytes,19,opt,name=schedule_type,proto3" json:"schedule_type,omitempty"`
	FrequencyValue     int64                  `protobuf:"varint,20,opt,name=frequency_value,proto3" json:"frequency_value,omitempty"`
	FrequencyUnit      string                 `protobuf:"bytes,21,opt,name=frequency_unit,proto3" json:"frequency_unit,omitempty"`
	Month              int64                  `protobuf:"varint,22,opt,name=month,proto3" json:"month,omitempty"`
	Week               int64                  `protobuf:"varint,23,opt,name=week,proto3" json:"week,omitempty"`
	Day                int64                  `protobuf:"varint,24,opt,name=day,proto3" json:"day,omitempty"`
	Hour               int64                  `protobuf:"varint,25,opt,name=hour,proto3" json:"hour,omitempty"`
	Minute             int64                  `protobuf:"varint,26,opt,name=minute,proto3" json:"minute,omitempty"`
	CreatedAt          string                 `protobuf:"bytes,27,opt,name=created_at,proto3" json:"created_at,omitempty"`
	UpdatedAt          string                 `protobuf:"bytes,28,opt,name=updated_at,proto3" json:"updated_at,omitempty"`
	DeletedAt          string                 `protobuf:"bytes,29,opt,name=deleted_at,proto3" json:"deleted_at,omitempty"`
	RunTime            string                 `protobuf:"bytes,30,opt,name=run_time,proto3" json:"run_time,omitempty"`
	ProfileId          string                 `protobuf:"bytes,31,opt,name=profile_id,proto3" json:"profile_id,omitempty"`
	CustomSwitches     string                 `protobuf:"bytes,32,opt,name=custom_switches,proto3" json:"custom_switches,omitempty"`
	SshKeyPath         string                 `protobuf:"bytes,33,opt,name=ssh_key_path,proto3" json:"ssh_key_path,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *UpdateScannerRequest) Reset() {
	*x = UpdateScannerRequest{}
	mi := &file_scanner_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateScannerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateScannerRequest) ProtoMessage() {}

func (x *UpdateScannerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scanner_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateScannerRequest.ProtoReflect.Descriptor instead.
func (*UpdateScannerRequest) Descriptor() ([]byte, []int) {
	return file_scanner_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateScannerRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateScannerRequest) GetScanType() string {
	if x != nil {
		return x.ScanType
	}
	return ""
}

func (x *UpdateScannerRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateScannerRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UpdateScannerRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *UpdateScannerRequest) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *UpdateScannerRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *UpdateScannerRequest) GetSubnet() int64 {
	if x != nil {
		return x.Subnet
	}
	return 0
}

func (x *UpdateScannerRequest) GetStartIp() string {
	if x != nil {
		return x.StartIp
	}
	return ""
}

func (x *UpdateScannerRequest) GetEndIp() string {
	if x != nil {
		return x.EndIp
	}
	return ""
}

func (x *UpdateScannerRequest) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

func (x *UpdateScannerRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *UpdateScannerRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *UpdateScannerRequest) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

func (x *UpdateScannerRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *UpdateScannerRequest) GetAuthenticationType() string {
	if x != nil {
		return x.AuthenticationType
	}
	return ""
}

func (x *UpdateScannerRequest) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *UpdateScannerRequest) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *UpdateScannerRequest) GetScheduleType() string {
	if x != nil {
		return x.ScheduleType
	}
	return ""
}

func (x *UpdateScannerRequest) GetFrequencyValue() int64 {
	if x != nil {
		return x.FrequencyValue
	}
	return 0
}

func (x *UpdateScannerRequest) GetFrequencyUnit() string {
	if x != nil {
		return x.FrequencyUnit
	}
	return ""
}

func (x *UpdateScannerRequest) GetMonth() int64 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *UpdateScannerRequest) GetWeek() int64 {
	if x != nil {
		return x.Week
	}
	return 0
}

func (x *UpdateScannerRequest) GetDay() int64 {
	if x != nil {
		return x.Day
	}
	return 0
}

func (x *UpdateScannerRequest) GetHour() int64 {
	if x != nil {
		return x.Hour
	}
	return 0
}

func (x *UpdateScannerRequest) GetMinute() int64 {
	if x != nil {
		return x.Minute
	}
	return 0
}

func (x *UpdateScannerRequest) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *UpdateScannerRequest) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *UpdateScannerRequest) GetDeletedAt() string {
	if x != nil {
		return x.DeletedAt
	}
	return ""
}

func (x *UpdateScannerRequest) GetRunTime() string {
	if x != nil {
		return x.RunTime
	}
	return ""
}

func (x *UpdateScannerRequest) GetProfileId() string {
	if x != nil {
		return x.ProfileId
	}
	return ""
}

func (x *UpdateScannerRequest) GetCustomSwitches() string {
	if x != nil {
		return x.CustomSwitches
	}
	return ""
}

func (x *UpdateScannerRequest) GetSshKeyPath() string {
	if x != nil {
		return x.SshKeyPath
	}
	return ""
}

type GetNmapProfilesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetNmapProfilesRequest) Reset() {
	*x = GetNmapProfilesRequest{}
	mi := &file_scanner_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNmapProfilesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNmapProfilesRequest) ProtoMessage() {}

func (x *GetNmapProfilesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scanner_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNmapProfilesRequest.ProtoReflect.Descriptor instead.
func (*GetNmapProfilesRequest) Descriptor() ([]byte, []int) {
	return file_scanner_proto_rawDescGZIP(), []int{7}
}

type GetNmapProfilesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Profiles      []*NmapProfile         `protobuf:"bytes,1,rep,name=profiles,proto3" json:"profiles,omitempty"`
	Success       bool                   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage  string                 `protobuf:"bytes,3,opt,name=error_message,proto3" json:"error_message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetNmapProfilesResponse) Reset() {
	*x = GetNmapProfilesResponse{}
	mi := &file_scanner_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNmapProfilesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNmapProfilesResponse) ProtoMessage() {}

func (x *GetNmapProfilesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scanner_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNmapProfilesResponse.ProtoReflect.Descriptor instead.
func (*GetNmapProfilesResponse) Descriptor() ([]byte, []int) {
	return file_scanner_proto_rawDescGZIP(), []int{8}
}

func (x *GetNmapProfilesResponse) GetProfiles() []*NmapProfile {
	if x != nil {
		return x.Profiles
	}
	return nil
}

func (x *GetNmapProfilesResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetNmapProfilesResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type GetNmapProfileRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetNmapProfileRequest) Reset() {
	*x = GetNmapProfileRequest{}
	mi := &file_scanner_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNmapProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNmapProfileRequest) ProtoMessage() {}

func (x *GetNmapProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scanner_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNmapProfileRequest.ProtoReflect.Descriptor instead.
func (*GetNmapProfileRequest) Descriptor() ([]byte, []int) {
	return file_scanner_proto_rawDescGZIP(), []int{9}
}

func (x *GetNmapProfileRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetNmapProfileResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Profile       *NmapProfile           `protobuf:"bytes,1,opt,name=profile,proto3" json:"profile,omitempty"`
	Success       bool                   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage  string                 `protobuf:"bytes,3,opt,name=error_message,proto3" json:"error_message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetNmapProfileResponse) Reset() {
	*x = GetNmapProfileResponse{}
	mi := &file_scanner_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNmapProfileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNmapProfileResponse) ProtoMessage() {}

func (x *GetNmapProfileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scanner_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNmapProfileResponse.ProtoReflect.Descriptor instead.
func (*GetNmapProfileResponse) Descriptor() ([]byte, []int) {
	return file_scanner_proto_rawDescGZIP(), []int{10}
}

func (x *GetNmapProfileResponse) GetProfile() *NmapProfile {
	if x != nil {
		return x.Profile
	}
	return nil
}

func (x *GetNmapProfileResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetNmapProfileResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type UpdateScannerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Scanner       *Scanner               `protobuf:"bytes,1,opt,name=scanner,proto3" json:"scanner,omitempty"`
	Success       bool                   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage  string                 `protobuf:"bytes,3,opt,name=error_message,proto3" json:"error_message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateScannerResponse) Reset() {
	*x = UpdateScannerResponse{}
	mi := &file_scanner_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateScannerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateScannerResponse) ProtoMessage() {}

func (x *UpdateScannerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scanner_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateScannerResponse.ProtoReflect.Descriptor instead.
func (*UpdateScannerResponse) Descriptor() ([]byte, []int) {
	return file_scanner_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateScannerResponse) GetScanner() *Scanner {
	if x != nil {
		return x.Scanner
	}
	return nil
}

func (x *UpdateScannerResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UpdateScannerResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type GetScannerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetScannerRequest) Reset() {
	*x = GetScannerRequest{}
	mi := &file_scanner_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetScannerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetScannerRequest) ProtoMessage() {}

func (x *GetScannerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scanner_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetScannerRequest.ProtoReflect.Descriptor instead.
func (*GetScannerRequest) Descriptor() ([]byte, []int) {
	return file_scanner_proto_rawDescGZIP(), []int{12}
}

func (x *GetScannerRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetScannerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Scanner       *Scanner               `protobuf:"bytes,1,opt,name=scanner,proto3" json:"scanner,omitempty"`
	Success       bool                   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage  string                 `protobuf:"bytes,3,opt,name=error_message,proto3" json:"error_message,omitempty"`
	Status        bool                   `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetScannerResponse) Reset() {
	*x = GetScannerResponse{}
	mi := &file_scanner_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetScannerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetScannerResponse) ProtoMessage() {}

func (x *GetScannerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scanner_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetScannerResponse.ProtoReflect.Descriptor instead.
func (*GetScannerResponse) Descriptor() ([]byte, []int) {
	return file_scanner_proto_rawDescGZIP(), []int{13}
}

func (x *GetScannerResponse) GetScanner() *Scanner {
	if x != nil {
		return x.Scanner
	}
	return nil
}

func (x *GetScannerResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetScannerResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *GetScannerResponse) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

type DeleteScannerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteScannerRequest) Reset() {
	*x = DeleteScannerRequest{}
	mi := &file_scanner_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteScannerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteScannerRequest) ProtoMessage() {}

func (x *DeleteScannerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scanner_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteScannerRequest.ProtoReflect.Descriptor instead.
func (*DeleteScannerRequest) Descriptor() ([]byte, []int) {
	return file_scanner_proto_rawDescGZIP(), []int{14}
}

func (x *DeleteScannerRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteScannerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage  string                 `protobuf:"bytes,2,opt,name=error_message,proto3" json:"error_message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteScannerResponse) Reset() {
	*x = DeleteScannerResponse{}
	mi := &file_scanner_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteScannerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteScannerResponse) ProtoMessage() {}

func (x *DeleteScannerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scanner_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteScannerResponse.ProtoReflect.Descriptor instead.
func (*DeleteScannerResponse) Descriptor() ([]byte, []int) {
	return file_scanner_proto_rawDescGZIP(), []int{15}
}

func (x *DeleteScannerResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DeleteScannerResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type DeleteScannersRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ids           []string               `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	Filter        *ScannerFilter         `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
	Exclude       bool                   `protobuf:"varint,3,opt,name=exclude,proto3" json:"exclude,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteScannersRequest) Reset() {
	*x = DeleteScannersRequest{}
	mi := &file_scanner_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteScannersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteScannersRequest) ProtoMessage() {}

func (x *DeleteScannersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scanner_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteScannersRequest.ProtoReflect.Descriptor instead.
func (*DeleteScannersRequest) Descriptor() ([]byte, []int) {
	return file_scanner_proto_rawDescGZIP(), []int{16}
}

func (x *DeleteScannersRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *DeleteScannersRequest) GetFilter() *ScannerFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *DeleteScannersRequest) GetExclude() bool {
	if x != nil {
		return x.Exclude
	}
	return false
}

type DeleteScannersResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage  string                 `protobuf:"bytes,2,opt,name=error_message,proto3" json:"error_message,omitempty"`
	DeletedCount  int32                  `protobuf:"varint,3,opt,name=deleted_count,proto3" json:"deleted_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteScannersResponse) Reset() {
	*x = DeleteScannersResponse{}
	mi := &file_scanner_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteScannersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteScannersResponse) ProtoMessage() {}

func (x *DeleteScannersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scanner_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteScannersResponse.ProtoReflect.Descriptor instead.
func (*DeleteScannersResponse) Descriptor() ([]byte, []int) {
	return file_scanner_proto_rawDescGZIP(), []int{17}
}

func (x *DeleteScannersResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DeleteScannersResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *DeleteScannersResponse) GetDeletedCount() int32 {
	if x != nil {
		return x.DeletedCount
	}
	return 0
}

type ListScannersRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Name            string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ScanType        string                 `protobuf:"bytes,2,opt,name=scan_type,proto3" json:"scan_type,omitempty"`
	Status          bool                   `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	HasStatusFilter bool                   `protobuf:"varint,4,opt,name=has_status_filter,json=hasStatusFilter,proto3" json:"has_status_filter,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ListScannersRequest) Reset() {
	*x = ListScannersRequest{}
	mi := &file_scanner_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListScannersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListScannersRequest) ProtoMessage() {}

func (x *ListScannersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scanner_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListScannersRequest.ProtoReflect.Descriptor instead.
func (*ListScannersRequest) Descriptor() ([]byte, []int) {
	return file_scanner_proto_rawDescGZIP(), []int{18}
}

func (x *ListScannersRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListScannersRequest) GetScanType() string {
	if x != nil {
		return x.ScanType
	}
	return ""
}

func (x *ListScannersRequest) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *ListScannersRequest) GetHasStatusFilter() bool {
	if x != nil {
		return x.HasStatusFilter
	}
	return false
}

type ListScannersResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Scanners      []*Scanner             `protobuf:"bytes,1,rep,name=scanners,proto3" json:"scanners,omitempty"`
	TotalCount    int32                  `protobuf:"varint,2,opt,name=total_count,proto3" json:"total_count,omitempty"`
	Success       bool                   `protobuf:"varint,3,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage  string                 `protobuf:"bytes,4,opt,name=error_message,proto3" json:"error_message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListScannersResponse) Reset() {
	*x = ListScannersResponse{}
	mi := &file_scanner_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListScannersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListScannersResponse) ProtoMessage() {}

func (x *ListScannersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scanner_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListScannersResponse.ProtoReflect.Descriptor instead.
func (*ListScannersResponse) Descriptor() ([]byte, []int) {
	return file_scanner_proto_rawDescGZIP(), []int{19}
}

func (x *ListScannersResponse) GetScanners() []*Scanner {
	if x != nil {
		return x.Scanners
	}
	return nil
}

func (x *ListScannersResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *ListScannersResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ListScannersResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type BatchUpdateScannersEnabledRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ids           []string               `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	Status        bool                   `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	Filter        *ScannerFilter         `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
	Exclude       bool                   `protobuf:"varint,4,opt,name=exclude,proto3" json:"exclude,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchUpdateScannersEnabledRequest) Reset() {
	*x = BatchUpdateScannersEnabledRequest{}
	mi := &file_scanner_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchUpdateScannersEnabledRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchUpdateScannersEnabledRequest) ProtoMessage() {}

func (x *BatchUpdateScannersEnabledRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scanner_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchUpdateScannersEnabledRequest.ProtoReflect.Descriptor instead.
func (*BatchUpdateScannersEnabledRequest) Descriptor() ([]byte, []int) {
	return file_scanner_proto_rawDescGZIP(), []int{20}
}

func (x *BatchUpdateScannersEnabledRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *BatchUpdateScannersEnabledRequest) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *BatchUpdateScannersEnabledRequest) GetFilter() *ScannerFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *BatchUpdateScannersEnabledRequest) GetExclude() bool {
	if x != nil {
		return x.Exclude
	}
	return false
}

type BatchUpdateScannersEnabledResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage  string                 `protobuf:"bytes,2,opt,name=error_message,proto3" json:"error_message,omitempty"`
	UpdatedCount  int32                  `protobuf:"varint,3,opt,name=updated_count,proto3" json:"updated_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchUpdateScannersEnabledResponse) Reset() {
	*x = BatchUpdateScannersEnabledResponse{}
	mi := &file_scanner_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchUpdateScannersEnabledResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchUpdateScannersEnabledResponse) ProtoMessage() {}

func (x *BatchUpdateScannersEnabledResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scanner_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchUpdateScannersEnabledResponse.ProtoReflect.Descriptor instead.
func (*BatchUpdateScannersEnabledResponse) Descriptor() ([]byte, []int) {
	return file_scanner_proto_rawDescGZIP(), []int{21}
}

func (x *BatchUpdateScannersEnabledResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *BatchUpdateScannersEnabledResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *BatchUpdateScannersEnabledResponse) GetUpdatedCount() int32 {
	if x != nil {
		return x.UpdatedCount
	}
	return 0
}

type CancelScanJobRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CancelScanJobRequest) Reset() {
	*x = CancelScanJobRequest{}
	mi := &file_scanner_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelScanJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelScanJobRequest) ProtoMessage() {}

func (x *CancelScanJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scanner_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelScanJobRequest.ProtoReflect.Descriptor instead.
func (*CancelScanJobRequest) Descriptor() ([]byte, []int) {
	return file_scanner_proto_rawDescGZIP(), []int{22}
}

func (x *CancelScanJobRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CancelScanJobResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage  string                 `protobuf:"bytes,2,opt,name=error_message,proto3" json:"error_message,omitempty"`
	JobId         int64                  `protobuf:"varint,3,opt,name=job_id,proto3" json:"job_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CancelScanJobResponse) Reset() {
	*x = CancelScanJobResponse{}
	mi := &file_scanner_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelScanJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelScanJobResponse) ProtoMessage() {}

func (x *CancelScanJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scanner_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelScanJobResponse.ProtoReflect.Descriptor instead.
func (*CancelScanJobResponse) Descriptor() ([]byte, []int) {
	return file_scanner_proto_rawDescGZIP(), []int{23}
}

func (x *CancelScanJobResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CancelScanJobResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *CancelScanJobResponse) GetJobId() int64 {
	if x != nil {
		return x.JobId
	}
	return 0
}

// Messages for running a scan immediately
type RunScanNowRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ScannerId     string                 `protobuf:"bytes,1,opt,name=scanner_id,proto3" json:"scanner_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunScanNowRequest) Reset() {
	*x = RunScanNowRequest{}
	mi := &file_scanner_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunScanNowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunScanNowRequest) ProtoMessage() {}

func (x *RunScanNowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scanner_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunScanNowRequest.ProtoReflect.Descriptor instead.
func (*RunScanNowRequest) Descriptor() ([]byte, []int) {
	return file_scanner_proto_rawDescGZIP(), []int{24}
}

func (x *RunScanNowRequest) GetScannerId() string {
	if x != nil {
		return x.ScannerId
	}
	return ""
}

type RunScanNowResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage  string                 `protobuf:"bytes,2,opt,name=error_message,proto3" json:"error_message,omitempty"`
	JobId         int64                  `protobuf:"varint,3,opt,name=job_id,proto3" json:"job_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunScanNowResponse) Reset() {
	*x = RunScanNowResponse{}
	mi := &file_scanner_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunScanNowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunScanNowResponse) ProtoMessage() {}

func (x *RunScanNowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scanner_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunScanNowResponse.ProtoReflect.Descriptor instead.
func (*RunScanNowResponse) Descriptor() ([]byte, []int) {
	return file_scanner_proto_rawDescGZIP(), []int{25}
}

func (x *RunScanNowResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *RunScanNowResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *RunScanNowResponse) GetJobId() int64 {
	if x != nil {
		return x.JobId
	}
	return 0
}

type UpdateScannerStatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ids           []string               `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	Status        bool                   `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	Filter        *ScannerFilter         `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
	Exclude       bool                   `protobuf:"varint,4,opt,name=exclude,proto3" json:"exclude,omitempty"`
	UpdateAll     bool                   `protobuf:"varint,5,opt,name=update_all,proto3" json:"update_all,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateScannerStatusRequest) Reset() {
	*x = UpdateScannerStatusRequest{}
	mi := &file_scanner_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateScannerStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateScannerStatusRequest) ProtoMessage() {}

func (x *UpdateScannerStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scanner_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateScannerStatusRequest.ProtoReflect.Descriptor instead.
func (*UpdateScannerStatusRequest) Descriptor() ([]byte, []int) {
	return file_scanner_proto_rawDescGZIP(), []int{26}
}

func (x *UpdateScannerStatusRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *UpdateScannerStatusRequest) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *UpdateScannerStatusRequest) GetFilter() *ScannerFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *UpdateScannerStatusRequest) GetExclude() bool {
	if x != nil {
		return x.Exclude
	}
	return false
}

func (x *UpdateScannerStatusRequest) GetUpdateAll() bool {
	if x != nil {
		return x.UpdateAll
	}
	return false
}

type UpdateScannerStatusResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage  string                 `protobuf:"bytes,2,opt,name=error_message,proto3" json:"error_message,omitempty"`
	UpdatedCount  int32                  `protobuf:"varint,3,opt,name=updated_count,proto3" json:"updated_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateScannerStatusResponse) Reset() {
	*x = UpdateScannerStatusResponse{}
	mi := &file_scanner_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateScannerStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateScannerStatusResponse) ProtoMessage() {}

func (x *UpdateScannerStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scanner_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateScannerStatusResponse.ProtoReflect.Descriptor instead.
func (*UpdateScannerStatusResponse) Descriptor() ([]byte, []int) {
	return file_scanner_proto_rawDescGZIP(), []int{27}
}

func (x *UpdateScannerStatusResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UpdateScannerStatusResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *UpdateScannerStatusResponse) GetUpdatedCount() int32 {
	if x != nil {
		return x.UpdatedCount
	}
	return 0
}

var File_scanner_proto protoreflect.FileDescriptor

var file_scanner_proto_rawDesc = string([]byte{
	0x0a, 0x0d, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xf8, 0x05, 0x0a, 0x07, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x63, 0x61, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x63, 0x61, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x70, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x70, 0x12,
	0x16, 0x0a, 0x06, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x12, 0x16, 0x0a,
	0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x30, 0x0a, 0x13, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x12, 0x25, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x0c, 0x6e, 0x6d,
	0x61, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x4e, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x0c,
	0x6e, 0x6d, 0x61, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x0f,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x73, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x73, 0x68, 0x5f, 0x6b, 0x65,
	0x79, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x73,
	0x68, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x22, 0x7d, 0x0a, 0x0d, 0x53, 0x63,
	0x61, 0x6e, 0x6e, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x68,
	0x61, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x68, 0x61, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x8f, 0x02, 0x0a, 0x0b, 0x4e, 0x6d,
	0x61, 0x70, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1c, 0x0a, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x69, 0x73, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x69, 0x73, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x22, 0x86, 0x02, 0x0a, 0x08,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x28,
	0x0a, 0x0f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x75, 0x6e, 0x69, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x75, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x75, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x6f, 0x6e,
	0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x77, 0x65, 0x65, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x64, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x75, 0x72,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x69,
	0x6e, 0x75, 0x74, 0x65, 0x22, 0xc3, 0x05, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x64,
	0x5f, 0x69, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x6e, 0x64, 0x5f, 0x69,
	0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12,
	0x30, 0x0a, 0x13, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x61, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x12, 0x25, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x0f,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x73, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x73, 0x68, 0x5f, 0x6b, 0x65,
	0x79, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x73,
	0x68, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x22, 0x93, 0x01, 0x0a, 0x15, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x07, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x52,
	0x07, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0xa8, 0x07, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x6e,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x63, 0x61,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x63,
	0x61, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x69, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x70, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x70, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x70, 0x69,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x69, 0x5f,
	0x6b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x30, 0x0a, 0x13, 0x61,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x66, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x75,
	0x6e, 0x69, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x79, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e,
	0x74, 0x68, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12,
	0x12, 0x0a, 0x04, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x77,
	0x65, 0x65, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x64, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x6e,
	0x75, 0x74, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x75, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x75, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x12, 0x28, 0x0a,
	0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x73,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x73, 0x68, 0x5f, 0x6b,
	0x65, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73,
	0x73, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x22, 0x18, 0x0a, 0x16, 0x47,
	0x65, 0x74, 0x4e, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x83, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4e, 0x6d, 0x61,
	0x70, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x28, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x4e, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x27, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x4e, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x80, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4e, 0x6d, 0x61, 0x70,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x26, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x4e, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x07,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x7b, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x22, 0x0a, 0x07, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x08, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x07, 0x73, 0x63, 0x61,
	0x6e, 0x6e, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x24,
	0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x23, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x63, 0x61, 0x6e, 0x6e,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x90, 0x01, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x22, 0x0a, 0x07, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x08, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x07, 0x73, 0x63, 0x61,
	0x6e, 0x6e, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x24,
	0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x26, 0x0a, 0x14,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x57, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x63,
	0x61, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x6b, 0x0a,
	0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x26, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x6e,
	0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x22, 0x7e, 0x0a, 0x16, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x24,
	0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x8b, 0x01, 0x0a, 0x13, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x63, 0x61, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x11,
	0x68, 0x61, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x68, 0x61, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x9e, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x24, 0x0a, 0x08, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x08, 0x73,
	0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x8f, 0x01, 0x0a, 0x21, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72,
	0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x53, 0x63, 0x61, 0x6e,
	0x6e, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x22,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x6e,
	0x65, 0x72, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x0d,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x26, 0x0a, 0x14, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x53, 0x63, 0x61, 0x6e, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x6f, 0x0a, 0x15, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x63, 0x61, 0x6e, 0x4a, 0x6f,
	0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6a, 0x6f, 0x62,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69,
	0x64, 0x22, 0x33, 0x0a, 0x11, 0x52, 0x75, 0x6e, 0x53, 0x63, 0x61, 0x6e, 0x4e, 0x6f, 0x77, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x61, 0x6e,
	0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0x6c, 0x0a, 0x12, 0x52, 0x75, 0x6e, 0x53, 0x63, 0x61,
	0x6e, 0x4e, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6a, 0x6f,
	0x62, 0x5f, 0x69, 0x64, 0x22, 0xa8, 0x01, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x22,
	0x83, 0x01, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x3a, 0x5a, 0x38, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e,
	0x61, 0x70, 0x6b, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x2f, 0x73, 0x69,
	0x65, 0x6d, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x2d, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70,
	0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_scanner_proto_rawDescOnce sync.Once
	file_scanner_proto_rawDescData []byte
)

func file_scanner_proto_rawDescGZIP() []byte {
	file_scanner_proto_rawDescOnce.Do(func() {
		file_scanner_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_scanner_proto_rawDesc), len(file_scanner_proto_rawDesc)))
	})
	return file_scanner_proto_rawDescData
}

var file_scanner_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_scanner_proto_goTypes = []any{
	(*Scanner)(nil),                            // 0: Scanner
	(*ScannerFilter)(nil),                      // 1: ScannerFilter
	(*NmapProfile)(nil),                        // 2: NmapProfile
	(*Schedule)(nil),                           // 3: Schedule
	(*CreateScannerRequest)(nil),               // 4: CreateScannerRequest
	(*CreateScannerResponse)(nil),              // 5: CreateScannerResponse
	(*UpdateScannerRequest)(nil),               // 6: UpdateScannerRequest
	(*GetNmapProfilesRequest)(nil),             // 7: GetNmapProfilesRequest
	(*GetNmapProfilesResponse)(nil),            // 8: GetNmapProfilesResponse
	(*GetNmapProfileRequest)(nil),              // 9: GetNmapProfileRequest
	(*GetNmapProfileResponse)(nil),             // 10: GetNmapProfileResponse
	(*UpdateScannerResponse)(nil),              // 11: UpdateScannerResponse
	(*GetScannerRequest)(nil),                  // 12: GetScannerRequest
	(*GetScannerResponse)(nil),                 // 13: GetScannerResponse
	(*DeleteScannerRequest)(nil),               // 14: DeleteScannerRequest
	(*DeleteScannerResponse)(nil),              // 15: DeleteScannerResponse
	(*DeleteScannersRequest)(nil),              // 16: DeleteScannersRequest
	(*DeleteScannersResponse)(nil),             // 17: DeleteScannersResponse
	(*ListScannersRequest)(nil),                // 18: ListScannersRequest
	(*ListScannersResponse)(nil),               // 19: ListScannersResponse
	(*BatchUpdateScannersEnabledRequest)(nil),  // 20: BatchUpdateScannersEnabledRequest
	(*BatchUpdateScannersEnabledResponse)(nil), // 21: BatchUpdateScannersEnabledResponse
	(*CancelScanJobRequest)(nil),               // 22: CancelScanJobRequest
	(*CancelScanJobResponse)(nil),              // 23: CancelScanJobResponse
	(*RunScanNowRequest)(nil),                  // 24: RunScanNowRequest
	(*RunScanNowResponse)(nil),                 // 25: RunScanNowResponse
	(*UpdateScannerStatusRequest)(nil),         // 26: UpdateScannerStatusRequest
	(*UpdateScannerStatusResponse)(nil),        // 27: UpdateScannerStatusResponse
}
var file_scanner_proto_depIdxs = []int32{
	3,  // 0: Scanner.schedule:type_name -> Schedule
	2,  // 1: Scanner.nmap_profile:type_name -> NmapProfile
	3,  // 2: CreateScannerRequest.schedule:type_name -> Schedule
	0,  // 3: CreateScannerResponse.scanner:type_name -> Scanner
	2,  // 4: GetNmapProfilesResponse.profiles:type_name -> NmapProfile
	2,  // 5: GetNmapProfileResponse.profile:type_name -> NmapProfile
	0,  // 6: UpdateScannerResponse.scanner:type_name -> Scanner
	0,  // 7: GetScannerResponse.scanner:type_name -> Scanner
	1,  // 8: DeleteScannersRequest.filter:type_name -> ScannerFilter
	0,  // 9: ListScannersResponse.scanners:type_name -> Scanner
	1,  // 10: BatchUpdateScannersEnabledRequest.filter:type_name -> ScannerFilter
	1,  // 11: UpdateScannerStatusRequest.filter:type_name -> ScannerFilter
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_scanner_proto_init() }
func file_scanner_proto_init() {
	if File_scanner_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_scanner_proto_rawDesc), len(file_scanner_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_scanner_proto_goTypes,
		DependencyIndexes: file_scanner_proto_depIdxs,
		MessageInfos:      file_scanner_proto_msgTypes,
	}.Build()
	File_scanner_proto = out.File
	file_scanner_proto_goTypes = nil
	file_scanner_proto_depIdxs = nil
}
